openapi: 3.0.0
info:
  title: TODO
  description: API Specification for TODO API
  version: 0.0.1
servers:
  - url: http://localhost:1323/api
tags:
  - name: user
    description: Manage users
  - name: task
    description: Manage tasks
paths:
  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '500':
          description: Internal server error
    put:
      tags:
        - user
      summary: Update user by ID
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user ID
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      tags:
        - user
      summary: Delete user by ID
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user ID
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error
  /users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '409':
          description: User already exists
  /tasks/{taskId}:
    get:
      tags:
        - task
      summary: Get task by ID
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The task ID
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task not found
        '500':
          description: Internal server error
    put:
      tags:
        - task
      summary: Update task by ID
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The task ID
      requestBody:
        description: Task object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid input
        '404':
          description: Task not found
        '500':
          description: Internal server error
    delete:
      tags:
        - task
      summary: Delete task by ID
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The task ID
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
        '500':
          description: Internal server error
  /tasks:
    get:
      tags:
        - task
      summary: Get all tasks
      operationId: getTasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - task
      summary: Create a new task
      operationId: createTask
      requestBody:
        description: Task object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid input
components:
  schemas:
    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-uuid-provider: google
          description: UUID generated by Google Firestore or Cloud Datastore
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/Status'
        user_id:
          type: string
          format: uuid
      required:
        - id
        - title
        - description
        - due_date
        - status
        - user_id
    TaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        due_date:
          type: string
          pattern: ^\d{2}/\d{2}/\d{4}$
          example: 31/12/2025
          description: Date in DD/MM/YYYY format
        status:
          $ref: '#/components/schemas/Status'
        user_id:
          type: string
          format: uuid
      required:
        - title
        - description
        - due_date
        - user_id
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-uuid-provider: google
          description: UUID generated by Google Firestore or Cloud Datastore
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - name
        - email
    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - name
        - email
    Status:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED
